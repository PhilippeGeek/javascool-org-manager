/*
 * $file.name
 * Copyright (C) 2012 Philippe VIENNE
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package org.javascool.core;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.nio.charset.Charset;

import org.javascool.tools.FileManager;
import org.javascool.widgets.Console;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;

/**
 * JS-Java Gate for WebJavac.
 * 
 * @author Philippe VIENNE
 */
public class WebJavac extends JavaGate {
    
    private static final long serialVersionUID = 1L;
    
    private Console.Listener  consoleListener  = new Console.Listener() {
                                                   /**
                                                    * Routine appellée à chaque
                                                    * sortie standard.
                                                    */
                                                   @Override
                                                   public void print(
                                                           String string) {
                                                       JSGate.triggerOff(
                                                               thisApplet,
                                                               "System.out",
                                                               string);
                                                   }
                                               };
    
    /**
     *
     */
    public void compile(final String code) {
        compile(code, "[]");
    }
    
    /**
     * Compile un code écrit en Java's Cool.
     * 
     * @param code
     *            Le code à compiler (ne pas donner un URL mais bien le code
     *            JVS)
     * @param jsonClasspath
     *            Un tableau encodé en JSon contenant les jar et répertoires à
     *            ajouter au classpath
     */
    @SuppressWarnings("unchecked")
    public void compile(final String code, final String jsonClasspath) {
        assertSafeUsage();
        try {
            runInNewThreadWithAllRights(new Runnable() {
                @Override
                public void run() {
                    consoleListener.clear();
                    JSONArray classpath = new JSONArray();
                    Object classpathParseResult = JSONValue
                            .parse(jsonClasspath);
                    if ((classpathParseResult != null)
                            && classpathParseResult instanceof JSONArray) {
                        classpath = (JSONArray) classpathParseResult;
                    }
                    String javaCode = getJVSTranslator().translate(code), javaClass = getJVSTranslator()
                            .getClassName();
                    File tmpDir = FileManager.createTempDir("jvs-compile-"
                            + javaClass);
                    String javaFile = tmpDir.getAbsolutePath()
                            + File.separatorChar + javaClass + ".java";
                    FileManager.save(javaFile, javaCode);
                    String[] java = new String[1], path = new String[1 + classpath
                            .size()];
                    java[0] = javaFile;
                    path[0] = jar();
                    int i = 1;
                    for (Object o : classpath) {
                        if (o instanceof String) {
                            path[i] = (String) o;
                            i++;
                        }
                    }
                    boolean success = Java2Class.compile(java, false, path);
                    JSONObject r = new JSONObject();
                    r.put("success", success);
                    r.put("compiledClass", javaFile.replace(".java", ".class"));
                    r.put("console", consoleListener.getText());
                    JSGate.triggerOff(thisApplet, "javascool.compiled", r);
                    consoleListener.clear();
                }
            });
            
        } catch (Exception e) {
            popException(e);
            throw new RuntimeException(e);
        }
    }
    
    /**
     * Return the Jvs2Java translator.
     * Call this function only form an AccessController.doPrivileged()
     */
    private Jvs2Java getJVSTranslator() {
        if (translator == null) {
            translator = new Jvs2Java();
        }
        return translator;
    }
    
    private Jvs2Java translator;
    
    /**
     * Retrouve le chemin du jar courant.
     * 
     * @return Le chemin du jar
     * @throws RuntimeException
     *             lorsque l'application n'a pas été démarré depuis un jar
     */
    public String jar() {
        if (WebJavac.javascoolJar != null) {
            return WebJavac.javascoolJar;
        }
        String url = WebJavac.class.getResource("").toString()
                .replaceFirst("jar:file:([^!]*)!.*", "$1");
        System.err.println("Notice: javascool url is " + url);
        if (url.endsWith(".jar")) {
            try {
                String jar = URLDecoder.decode(url, "UTF-8");
                if (new File(jar).exists()) {
                    return WebJavac.javascoolJar = jar;
                }
                // Ici on essaye tous les encodages possibles pour essayer de
                // détecter javascool
                {
                    jar = URLDecoder.decode(url, Charset.defaultCharset()
                            .name());
                    if (new File(jar).exists()) {
                        WebJavac.javascoolJarEnc = Charset.defaultCharset()
                                .name();
                        return jar;
                    }
                    for (String enc : Charset.availableCharsets().keySet()) {
                        jar = URLDecoder.decode(url, enc);
                        if (new File(jar).exists()) {
                            WebJavac.javascoolJarEnc = enc;
                            System.err.println("Notice: javascool file " + jar
                                    + " correct decoding as " + enc);
                            return WebJavac.javascoolJar = jar;
                        } else {
                            System.err.println("Notice: javascool file " + jar
                                    + " wrong decoding as " + enc);
                        }
                    }
                    throw new RuntimeException(
                            "Il y a un bug d'encoding sur cette plate forme");
                }
            } catch (UnsupportedEncodingException ex) {
                throw new RuntimeException(
                        "Spurious defaultCharset: this is a caveat");
            }
        } else {
            return "";
        }
        // throw new
        // RuntimeException("Java's cool n'a pas été démarré depuis un Jar");
    }
    
    private static String javascoolJar = null, javascoolJarEnc = null;
}
