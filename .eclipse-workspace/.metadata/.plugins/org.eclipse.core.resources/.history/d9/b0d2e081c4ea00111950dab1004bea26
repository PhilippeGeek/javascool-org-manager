/*
 * $file.name
 *     Copyright (C) 2012  Philippe VIENNE
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.javascool.core;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.Hashtable;

public class JVSClassLoader extends ClassLoader {
  private String location = null;
  private Hashtable<String,Class<?>> classes = new Hashtable<String,Class<?>>();

    public JVSClassLoader(String location) {
        super(JVSClassLoader.class.getClassLoader()); //calls the parent class loader's constructor
        this.location = location;
    }

    public Class<?> loadClass(String className) throws ClassNotFoundException {
        return findClass(className);
    }

    public Class<?> findClass(String className) throws ClassNotFoundException {
        byte classByte[];
        Class<?> result = null;

        result = (Class<?>) classes.get(className); //checks in cached classes
        if (result != null) {
            return result;
        }

        try {
            return findSystemClass(className);
        } catch (Exception e) {
        }

        try{
            return JVSClassLoader.class.getClassLoader().loadClass(className);
        } catch(Exception e){}

        try {
            FileInputStream in = new FileInputStream(location + File.separator + className + ".class");
            ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
            int nextValue = in.read();
            while (-1 != nextValue) {
                byteStream.write(nextValue);
                nextValue = in.read();
            }
            in.close();
            classByte = byteStream.toByteArray();
            result = defineClass(className, classByte, 0, classByte.length, null);
            classes.put(className, result);
            return result;
        } catch (Exception e) {
            throw new ClassNotFoundException(e.toString());
        }
        //
    }
}
